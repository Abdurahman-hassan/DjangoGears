"""
Django settings for DjangoGears project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from configurations import Configuration, values
import dj_database_url

class Dev(Configuration):
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = values.Value('django-insecure-_k5n%cgiqea2)x9z#!je5f7!phjy)$z6ckclv9=ah2$wby_lqa')

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = values.BooleanValue(True)

    ALLOWED_HOSTS = values.ListValue(['localhost', '0.0.0.0','127.0.0.1', 'codio.io'])


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'blog',
        'crispy_forms',
        'crispy_bootstrap5',
        "debug_toolbar",
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        "debug_toolbar.middleware.DebugToolbarMiddleware",

    ]

    ROOT_URLCONF = 'DjangoGears.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates']
            ,
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'DjangoGears.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/4.2/ref/settings/#databases

    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': BASE_DIR / 'db.sqlite3',
    #     }
    # }
    DATABASES = {
        "default": dj_database_url.config(default=f"sqlite:///{BASE_DIR}/db.sqlite3"),
        "alternative": dj_database_url.config(
            "ALTERNATIVE_DATABASE_URL",
            default=f"sqlite:///{BASE_DIR}/alternative_db.sqlite3",
        ),
    }

    # Password validation
    # https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/4.2/topics/i18n/

    LANGUAGE_CODE = values.Value('en-us')

    TIME_ZONE = values.Value('UTC')

    USE_I18N = values.BooleanValue(True)

    USE_TZ = values.BooleanValue(True)


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.2/howto/static-files/

    STATIC_URL = '/static/'

    STATICFILES_DIRS = [
        BASE_DIR / "static"
    ]
    # Default primary key field type
    # https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
    CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
    CRISPY_TEMPLATE_PACK = "bootstrap5"

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False, # disable any exeisting non root loggers
        "filters": {
            "require_debug_false": {
                "()": "django.utils.log.RequireDebugFalse",
            },
        },
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{", # "{message}") or "%s" for old style interpolation. "%s" is the default.
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stdout", # Default is stderr
                "formatter": "verbose",
            },
            "mail_admins": {
                "level": "ERROR",
                "class": "django.utils.log.AdminEmailHandler",
                "filters": ["require_debug_false"],
            },
            # "file": {"class": "logging.FileHandler", "filename": "/var/log/blango.log"},
        },
        "loggers": {
            "django.request": { # only when exceptions are unhandled does it get sent
                "handlers": ["mail_admins"],
                "level": "ERROR",
                "propagate": True, # the stack traces also get logged to the console during development.
            },
        },
        "root": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    }

    ADMINS = [("Ben Shaw", "ben@example.com"), ("Leo Lucio", "leo@example.com")] # The users who get code error notifications.
    DJANGO_ADMINS="Ben Shaw,ben@example.com;Leo Lucio,leo@example.com"

    # pip3 install "django[argon2]"
    PASSWORD_HASHERS = [
          'django.contrib.auth.hashers.Argon2PasswordHasher',
          'django.contrib.auth.hashers.PBKDF2PasswordHasher',
          'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
          'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
      ]

    # default cache backend in memory it's faster but if the app has been crashed the cache is lost
    """ CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
            "LOCATION": "127.0.0.1:11211",
        }
    }
    """
    # default cache backend in database not in memory it's slower but if the app has been crashed the cache is not lost
    # we need to add python mange.py createcachetable to create the table in the database
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "my_cache_table",
        }
    }

    """
    # file system cache backend
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
            "LOCATION": "/var/tmp/django_cache", # must exist (Django won’t create it)
            }
        }
    """

    """
    # local memory cache backend
    #  This can give you the speed advantages of in-memory caching without having to set up Memcached.
    # However, since the cache is inside the Python process’ memory, 
    # it can’t be shared across multiple Django instances.
    
    
    # The LOCATION setting is not required, unless you have multiple local-memory caches. In which case, it should be unique for each one.
    # This is actually the default backend that Django uses, and it’s good for development as you can test caching without setting up any external services.
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
            }
    """

    """
    # dummy cache backend
    # This is a dummy cache that doesn’t cache anything at all.
    # It’s used to disable caching, or in test suites.
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
            }
        }
    """
    INTERNAL_IPS = [
        # ...
        "127.0.0.1",
        # ...
    ]

class Prod(Dev):
    DEBUG = values.BooleanValue(False)
    SECRET_KEY = values.SecretValue()

    # ALLOWED_HOSTS=localhost,0.0.0.0,.codio.io python manage.py runserver 0.0.0.0:8000
